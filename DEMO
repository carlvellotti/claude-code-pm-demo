# Demo Plan: 3-Agent Product Development Workflow

## Quick storyline (what the audience will see)

* Spin up Claude Code in a fresh Vercel AI Chatbot.
* Show Claude's "read/write the repo" basics.
* Use **3 specialized agents** in sequence:
  1. **Research Agent** - Uses Perplexity MCP to find relevant Reddit threads, Reddit MCP to pull detailed information, synthesizes into pain points
  2. **Requirements & Documentation Agent** - Uses CCPM MCP, Google Drive MCP, and Slack MCP to turn pain points into requirements, write PRD, and post updates
  3. **Implementation Agent** - Actually builds a prototype based on the requirements
* Demonstrate end-to-end product development from research to implementation.

---

## 0) Prep (do once)

### Repo + local run

```bash
git clone https://github.com/vercel/ai-chatbot.git
cd ai-chatbot
npm install  # or pnpm install
npm run dev  # http://localhost:3000
```

### Claude Code

```bash
npm i -g @anthropic-ai/claude-code
claude init
claude dev
```

In the Claude REPL, keep least-privilege with `/permissions` (allow `Edit:*`, `Bash:npm*`, minimal `Git:*`).

### CCPM (requirements toolkit)

```bash
# In project root
curl -sSL https://raw.githubusercontent.com/automazeio/ccpm/main/ccpm.sh | bash
# then inside the Claude REPL:
# /pm:init
```

### MCPs for Demo

* **Perplexity** (search and reasoning for research) - `brew install perplexity-mcp`
* **Reddit** (pull detailed thread information) 
* **GitHub** (open PR from Claude)
* **Slack** (post status updates)
* **SlideSpeak** (export stakeholder decks)
* **Google Drive** (optional) for docs
* **CCPM** (requirements management)

### Seed two helper files

* `docs/voice-and-tone.md` — bullets for 3 personas: Mentor, Support Pro, Skeptical Engineer (tone traits).
* `todo.md` — sections: **Research**, **PRD**, **Build**, **QA**, **Comms**.

---

## 1) 3 Specialized Agents (create once; don't build live)

Create `.claude/agents/` and add these three files.

**.claude/agents/research-agent.md**

```markdown
---
name: research-agent
description: Uses Perplexity MCP to search and analyze topics, then synthesizes findings into clear pain points and insights.
tools: mcp__perplexity-mcp__perplexity_ask, mcp__perplexity-mcp__perplexity_reason, Read, Edit
---
Process: 
1. Use perplexity_ask to search for recent discussions about the given topic
2. Use perplexity_reason to analyze findings and identify patterns
3. Synthesize into pain points document with sections: TL;DR, Key Pain Points, Representative Quotes, Market Signals, Opportunity Assessment
Keep output focused and actionable. 400-500 words max.
```

**.claude/agents/requirements-documentation-agent.md**

```markdown
---
name: requirements-documentation-agent
description: Takes research pain points and converts them into formal requirements using CCPM MCP, documents in Google Drive MCP, and communicates updates via Slack MCP.
tools: mcp:ccpm, mcp:google-drive, mcp:slack, Read, Edit
---
Process:
1. Use CCPM MCP to create structured PRD from pain points
2. Store PRD and related docs in Google Drive using Drive MCP
3. Post updates and milestones to team via Slack MCP
4. Generate clear acceptance criteria and success metrics
Focus on translating user pain into actionable product requirements.
```

**.claude/agents/implementation-agent.md**

```markdown
---
name: implementation-agent
description: Takes requirements and builds working prototypes. Focuses on minimal viable implementations that demonstrate the core functionality.
tools: Read, Edit, Bash, Grep, Glob, Git
---
Process: 
1. Read requirements and acceptance criteria
2. Identify minimal file changes needed
3. Implement core functionality first
4. Verify with npm run dev
5. Add basic tests if time permits
Keep changes surgical and focused. Prioritize working demo over perfect code.
```

---

## 2) Live run-through (what to click/type on air)

### A) Boot + basic capabilities (2–3 min)

1. In the repo: `claude dev`
2. Prompt:
   **"Explain this repo at a PM level. Which files own the chat functionality? Save overview to `docs/ARCHITECTURE.md`."**

### B) MCPs Setup & Testing (3–4 min)

* One-liner: **MCPs are tool hookups with scoped permissions - Perplexity for search/reasoning, Drive for docs, Slack for comms.**
* Test the Perplexity MCP:
  1. **Search capability:** `mcp__perplexity-mcp__perplexity_ask` for finding AI chatbot UX discussions
  2. **Reasoning capability:** `mcp__perplexity-mcp__perplexity_reason` for analyzing implementation trade-offs
  3. **Verify:** `claude mcp list` to confirm connection status

### C) 3-Agent Workflow Demo (15–18 min)

#### Stage 1: Research Agent (5–6 min)
**Prompt to research-agent:**
**"Research current AI chatbot UX pain points. Use perplexity_ask to find recent discussions about chatbot frustrations and UX issues, then use perplexity_reason to analyze patterns. Synthesize into pain points document with key issues and user insights."**

#### Stage 2: Requirements & Documentation Agent (5–6 min)
**Prompt to requirements-documentation-agent:**
**"Take the research pain points and create a PRD using CCPM. Store the PRD in Google Drive and post a project kickoff update to Slack. Focus on the most critical UX improvement we can prototype quickly."**

#### Stage 3: Implementation Agent (5–6 min)
**Prompt to implementation-agent:**
**"Implement a prototype solution based on the PRD requirements. Focus on the minimal viable demo that addresses the key pain point identified in research."**

Then run:
```bash
npm run dev
```

Show the working prototype demonstrating the solution to the researched pain point.

---

## 3) Timing (25–30 min total)

* 2–3 min: Claude explain repo + basic setup
* 3–4 min: MCP testing (Perplexity + Reddit)
* 5–6 min: Research Agent (pain point synthesis)  
* 5–6 min: Requirements Agent (PRD + CCPM + Drive + Slack)
* 5–6 min: Implementation Agent (build prototype)
* 4–5 min buffer for narration and demos

---

## 4) Contingencies

* If Drive or Slack MCP misbehaves, paste the text or narrate and continue.
* If TypeScript or build fails, ask `dev-impl`: **“diagnose and apply the minimal fix, then re-run only updated files.”**
* If time runs short, skip deck generation and just do Slack status + PR.

---

## 5) One-liners to explain concepts (human, quick)

* **Claude Code:** “It sits inside the repo, reads/writes files, and runs commands with my approval.”
* **MCPs:** “Tool hookups with scoped permissions so Claude can use Drive, Slack, GitHub, SlideSpeak.”
* **Agents:** “Role presets with their own prompts and tools. I’ve got a researcher, analyst, implementer, and a tiny PM-orchestrator for my personal workflow.”
* **CCPM:** “A requirements flow—turns a PRD into epics and tasks and gives me quick `/pm:status` and `/pm:standup` snapshots.”

This version keeps the **Project Manager** role focused on **solo PM prototyping**: update a personal tracker, post one Slack note, make a 6-slide deck, and optionally open a PR—no enterprise ticket juggling.
